#!/usr/bin/env node
'use strict';

var program = require('commander');
var command = require('../lib/commands/generateApi/generateApi.js');
var deploy = require('../lib/commands/deployApi/deployApi.js');
var mochaTestService = require('../lib/util/mocha-test-service');
var version = require('../lib/util/cli').version();
var stt = require('swagger-test-templates');
var fs = require('fs');

var config = {
    assertionFormat: 'should',
    testModule: 'supertest',
    pathName: []
};

var mkdirp = require('mkdirp');
var executed = false;

program
    .version(version);

program
    .usage('<command> <options>')
    .command('generateApi <apiProxy>')
    .option('-s, --source <source>', 'openapi File Source.')
    .option('-d, --destination <destination>', 'API Bundle destination location.')
    .option('-D, --deploy', 'Deploy to Apigee Edge')
    .option('-b, --baseuri <baseuri>', 'Apigee Edge EndPoint to Deploy')
    .option('-t, --tests <tests>', 'Generate tests')
    .option('-o, --organization <organization>', 'Apigee Edge Organization to Deploy')
    .option('-e, --environments <environments>', 'Apigee Edge Environment to Deploy')
    .option('-v, --virtualhosts <virtualhosts>', 'Apigee Edge virtual hosts to Deploy')
    .option('-u, --username <username>', 'Apigee Edge Username to Deploy')
    .option('-p, --password <password>', 'Apigee Edge Password to Deploy')

    .description('Generates Apigee API Bundle')
    .action(function (apiProxy, options) {
        executed = true;
        command.generateApi(apiProxy, options, function (err, reply) {
            if (err) {
                console.log(err);
                process.exit(1);
            }
            else {
                if (options.tests) {
                    fs.readFile(options.source, 'utf8', function read(err, data) {
                        if (err) {
                            throw err;
                        }
                        var swagger = JSON.parse(data);
                        var tests = stt.testGen(swagger, config);
                        //Create dir if it doesn't exist
                        mkdirp(options.destination + 'tests/', function (err) {
                            if (err) return cb(err);

                            //Generate test files from the spec
                            tests.forEach(function (test, index) {
                                fs.writeFile(options.destination + 'tests/' + test.name, test.test, function (err) {
                                    if (err) {
                                        return console.log(err);
                                    }
                                });
                            });
                        });
                    });
                }

                if (options.destination) {
                    console.log('Apigee API bundle and tests generated in location ' + options.destination);
                }
                else {
                    console.log('Apigee API bundle and tests generated in current directory. ');
                }

                if (options.deploy) {
                    deploy.deployApi(apiProxy, options, function (err, reply) {
                        if (err) {
                            console.log(err);
                            process.exit(1);
                        }
                        else {
                            console.log('Deployment to Apigee successfully completed.');
                            // TODO: Verify if need to run tests after deployment
                            // mochaTestService.runTests(options.destination + 'tests/', function (err, failures) {
                            //     if (err) {
                            //         console.log("Can't deploy proxy bundle because the tests failed. Check your test files at " + options.destination + "tests/");
                            //         process.exit(1);
                            //     } else {
                            //
                            //     }
                            // });
                        }
                    });
                }
            }
        });
    });

program.on('--help', function () {
    console.log('  Examples:');
    console.log('');
    console.log('    $ openapi2apigee generateApi --help');
    console.log('    $ openapi2apigee generateApi -s http://petstore.openapi.io/v2/openapi.json -d /Users/Anil/Desktop/ -D petStore');
    console.log('');
});

program.parse(process.argv);

if (!process.argv.slice(2).length || !executed) {
    program.outputHelp();
    process.exit(1);
}
